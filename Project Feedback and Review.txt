PRECOURSE PROJECT REVIEW


Dear Student,

Thank you for this great project! You understand the topics covered in the lessons very well.

It was a pleasure to go through your code. I'll also suggest using the documentation 
you created to showcase this work since it is a great project that you achieved here.

Keep up the good work! üôÇüëç

If you have any questions, please let us know on the knowledge forum.
You passed this one,
Best wishes on the next project


Excellent work!
My suggestion is after this course, go check data structures and algorithms on python.
I am quite sure that this will improve your current python skills.
Here are some free resources about this topic:

1) http://greenteapress.com/thinkpython/html/index.html
2) https://runestone.academy/runestone/books/published/pythonds/index.html
3) https://docs.google.com/viewer?a=v&pid=sites&srcid=dnVrbWFsYmFzYS5jb218d3d3fGd4OjU3NWZjOWU1MTM4ZTI4OQ
4) this one is my favorite, it is about solving hard mathematical problems via programming languages. 
You really need to know how to play with data types : https://projecteuler.net


You did a great job with pandas
Please check the visualization packages also. Eventhough they are not discussed in the course,
 I am quite sure that you can understand and use them in your projects.
I highly suggest following visualization libraries:
1)plotly (https://plotly.com/python/)
2)streamlit (https://www.streamlit.io)

Excellent! you make really good use of functions. Thanks to functions, your code is modular and very clean. 
Now the next step is the python "class". If you want to a quick 
tutorial about classes: https://www.learnpython.org/en/Classes_and_Objects

Good job including a docstring in all functions to explain the purpose of a function. It makes it easy to follow your function. 
If you would like to know more about what docstrings are, how to write 
good one-line or multi-line docstrings please see the following link;
https://peps.python.org/


Thanks to casefold method, your input handling becomes very robust!‚Ä®
To reduce repetition, you can use the following get filters function (just a suggestion no need change anything):

def check_data_entry(prompt, valid_entries): 
    """
    Asks user to type some input and verify if the entry typed is valid.
    Since we have 3 inputs to ask the user in get_filters(), it is easier to write a function.
    Args:
        (str) prompt - message to display to the user
        (list) valid_entries - list of string that should be accepted 
    Returns:
        (str) user_input - the user's valid input
    """
    try:
        user_input = str(input(prompt)).lower()

        while user_input not in valid_entries : 
            print('Sorry... it seems like you\'re not typing a correct entry.')
            print('Let\'s try again!')
            user_input = str(input(prompt)).lower()

        print('Great! the chosen entry is: {}\n'.format(user_input))
        return user_input

    except:
        print('Seems like there is an issue with your input')

 valid_cities = CITY_DATA.keys()
    prompt_cities = 'Please choose one of the 3 cities (chicago, new york city, washington): '
    city = check_data_entry(prompt_cities, valid_cities)


Well done! I think it is quite important to check data manually. However, it would be nice if we can see all columns. When I run the code, columns are collapsed, and only some of them are shown.
You can prevent this situation by adding this to your code:

pd.set_option(‚Äòdisplay.max_columns',200)
Here is another way to do this:

while True:
    display_data = input('\nWould you like to see 5 lines of raw data? Enter yes or no.\n')
    if display_data.lower() != 'yes':
        break
    print(tabulate(df_default.iloc[np.arange(0+i,5+i)], headers ="keys"))
    i+=5
As you see, I use a new library here, tabulate. So to use this, please also import the module:
from tabulate import tabulate




